// stub file for the Nullness Checker
// The method being invoked permits null.
import org.checkerframework.checker.nullness.qual.Nullable;

package java.lang.reflect;

public final class Method {
    public @Nullable Object invoke(@Nullable Object obj, Object @Nullable ... args);
}

public final class Array { 
	public static native int getLength(@Nullable Object array);
	public static native Object get(@Nullable Object array, int index);
}

public final class Constructor<T> extends Executable {
	public @NonNullT newInstance(@Nullable Object ... initargs);
}


package java.lang;

public final class Class<T> {
    public <A extends java.lang.annotation.Annotation> @Nullable A getAnnotation(@Nullable Class<A> a1);
//    public T cast(@Nullable Object obj);
	public Method getMethod(@Nullable String name, Class<?>... parameterTypes);
	public native boolean isAssignableFrom(@Nullable Class<?> cls);
}

public final class Long extends Number implements Comparable<Long> {
	public int compareTo(@Nullable Long anotherLong);
}


package java.util;

public interface Set<E> extends Collection<E> {
    boolean add(@Nullable E e);
    boolean remove(@Nullable Object o);
}

public interface List<E>  {
    boolean add(@Nullable E e);
}

public class ArrayList<E> {
	public ArrayList(@Nullable Collection<? extends E> c);
}

public class IdentityHashMap<K,V> {
	public V put(@Nullable K key, V value);
}

public class Vector<E> {
	public synchronized boolean add(@Nullable E e);
}

package java.io;

//public class ObjectInputStream {
//    public static abstract class GetField {
//        public abstract @Nullable Object get(String a1, @Nullable Object a2);
//        public java.lang.reflect.Field getField(String a1);
//    }
//}

//public class ObjectInputStream {
//    private class GetFieldImpl {
//        public abstract Object get(String name, @Nullable Object val);
//    }
//}

package java.util.concurrent;

public class CopyOnWriteArrayList<E> {
    public CopyOnWriteArrayList(@Nullable Collection<? extends E> c);
}

public interface Callable<V> {
	@Nullable V call() throws Exception;
}