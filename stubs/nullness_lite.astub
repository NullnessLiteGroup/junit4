// stub file for the Nullness Checker
// The method being invoked permits null.
import org.checkerframework.dataflow.qual.Pure;
import org.checkerframework.checker.nullness.qual.Nullable;

package java.lang.reflect;

public final class Method {


    // The method being invoked might be one that requires non-null
    // arguments (including the receiver obj), or might be one that permits
    // null.  We don't know which.  Therefore, the Nullness Checker should
    // conservatively issue a warning whenever null is passed, in order to
    // give a guarantee that no nullness-related exception will be thrown
    // by the invoked method.
    public @Nullable Object invoke(@Nullable Object obj, Object ... args);

}

package java.lang;

public final class Class<T> {
    public <A extends java.lang.annotation.Annotation> @Nullable A getAnnotation(@Nullable Class<A> a1);
    public T cast(@Nullable Object obj);
}

package java.util;
public interface Set<E> extends Collection<E> {
    boolean add(@Nullable E e);
    boolean remove(@Nullable Object o);
}

public interface List<E>  {
    boolean add(@Nullable E e);
}

package java.io;

//public class ObjectInputStream {
//    public static abstract class GetField {
//        public abstract @Nullable Object get(String a1, @Nullable Object a2);
//        public java.lang.reflect.Field getField(String a1);
//    }
//}

//public class ObjectInputStream {
//    private class GetFieldImpl {
//        public abstract Object get(String name, @Nullable Object val);
//    }
//}

package java.util.concurrent;
public class CopyOnWriteArrayList<E> {
    public CopyOnWriteArrayList(@Nullable Collection<? extends E> c);
}